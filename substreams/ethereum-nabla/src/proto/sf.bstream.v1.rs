// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockRequest {
    /// Number of blocks we want to get in burst upon connection, on a best effort basis.
    /// -1 means "LIB"
    /// any other "-X" value means "start at block X"
    #[prost(int64, tag = "1")]
    pub burst: i64,
    /// Type of blocks we're after here, is it 'ethereum' data, 'eos', etc.. The server can fail early
    /// if he doesn't match the data he serves (services mismatch, etc..)
    #[prost(string, tag = "2")]
    pub content_type: ::prost::alloc::string::String,
    #[prost(enumeration = "block_request::Order", tag = "3")]
    pub order: i32,
    #[prost(string, tag = "4")]
    pub requester: ::prost::alloc::string::String,
}
/// Nested message and enum types in `BlockRequest`.
pub mod block_request {
    /// Whether we can assume the data will come ordered, unless there is a chain reorganization.
    /// mindreaders output ordered data, whereas relayers can output unordered data.
    /// The server can fail early if the assumption of the caller cannot be fulfilled.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Order {
        Unspecified = 0,
        Ordered = 1,
        Unordered = 2,
    }
    impl Order {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::Ordered => "ORDERED",
                Self::Unordered => "UNORDERED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "ORDERED" => Some(Self::Ordered),
                "UNORDERED" => Some(Self::Unordered),
                _ => None,
            }
        }
    }
}
/// Cursor is used to generate a string cursor, currently being utilized in forkable
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cursor {
    #[prost(message, optional, tag = "1")]
    pub block: ::core::option::Option<BlockRef>,
    #[prost(message, optional, tag = "2")]
    pub head_block: ::core::option::Option<BlockRef>,
    #[prost(message, optional, tag = "3")]
    pub lib: ::core::option::Option<BlockRef>,
    #[prost(enumeration = "ForkStep", tag = "4")]
    pub step: i32,
}
/// Block is the chain agnostic representation of a block. It contains the block
/// metadata like num, hash, parent num, etc as well as containing the payload.
///
/// **Required** Any changes to non-payload field on this object must be
/// reflected in `BlockMeta` as well!
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    #[prost(uint64, tag = "1")]
    pub number: u64,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub parent_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<
        super::super::super::google::protobuf::Timestamp,
    >,
    #[prost(uint64, tag = "5")]
    pub lib_num: u64,
    #[deprecated]
    #[prost(enumeration = "Protocol", tag = "6")]
    pub payload_kind: i32,
    #[deprecated]
    #[prost(int32, tag = "7")]
    pub payload_version: i32,
    #[deprecated]
    #[prost(bytes = "vec", tag = "8")]
    pub payload_buffer: ::prost::alloc::vec::Vec<u8>,
    #[deprecated]
    #[prost(uint64, tag = "9")]
    pub head_num: u64,
    #[prost(uint64, tag = "10")]
    pub parent_num: u64,
    #[prost(message, optional, tag = "11")]
    pub payload: ::core::option::Option<super::super::super::google::protobuf::Any>,
}
/// BlockMeta is strictly equivalent to Block, except that it doesn't contain the payload
/// nor any field related to payload.
///
/// First, it's used to store block meta information on disk or on a KV store. Second,
/// it serves the purpose of being a lighter version of Block, that can to `proto.Unmarshal`
/// a real `Block` while ignoring the payload.
///
/// **Required** Alignment of the fields in this struct is **required** to be the same as
/// `Block` to allow for `proto.Unmarshal` to work.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockMeta {
    #[prost(uint64, tag = "1")]
    pub number: u64,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub parent_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<
        super::super::super::google::protobuf::Timestamp,
    >,
    #[prost(uint64, tag = "5")]
    pub lib_num: u64,
    #[prost(uint64, tag = "10")]
    pub parent_num: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockRef {
    #[prost(uint64, tag = "1")]
    pub num: u64,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericBlockIndex {
    #[prost(message, repeated, tag = "4")]
    pub kv: ::prost::alloc::vec::Vec<KeyToBitmap>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyToBitmap {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub bitmap: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ForkStep {
    StepUnknown = 0,
    /// Block is new head block of the chain, that is linear with the previous block
    StepNew = 1,
    /// Block is now forked and should be undone, it's not the head block of the chain anymore
    StepUndo = 2,
    /// Block is now irreversible and can be committed to (finality is chain specific, see chain documentation for more details)
    StepIrreversible = 4,
}
impl ForkStep {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StepUnknown => "STEP_UNKNOWN",
            Self::StepNew => "STEP_NEW",
            Self::StepUndo => "STEP_UNDO",
            Self::StepIrreversible => "STEP_IRREVERSIBLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STEP_UNKNOWN" => Some(Self::StepUnknown),
            "STEP_NEW" => Some(Self::StepNew),
            "STEP_UNDO" => Some(Self::StepUndo),
            "STEP_IRREVERSIBLE" => Some(Self::StepIrreversible),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Protocol {
    Unknown = 0,
    Eos = 1,
    Eth = 2,
    Solana = 3,
    Near = 4,
    Cosmos = 5,
}
impl Protocol {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Eos => "EOS",
            Self::Eth => "ETH",
            Self::Solana => "SOLANA",
            Self::Near => "NEAR",
            Self::Cosmos => "COSMOS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "EOS" => Some(Self::Eos),
            "ETH" => Some(Self::Eth),
            "SOLANA" => Some(Self::Solana),
            "NEAR" => Some(Self::Near),
            "COSMOS" => Some(Self::Cosmos),
            _ => None,
        }
    }
}
